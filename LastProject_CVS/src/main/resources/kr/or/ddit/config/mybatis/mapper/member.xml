<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">

	
	
	<!-- 	아 이 디 : getMemIdCnt
	  		반 환 값 : int
	  		매개변수 : string(mem_id)
	  		설    명 : 사용자ID 중복 조회 (해당 아이디가 있는지 조회 개수반환) 
	  		작 성 자 : 공은별
	  		일    시 : 2018-09-05     
	 -->
	<select id="getMemIdCnt" parameterType="string" resultType="int">
		SELECT COUNT(*)getListProdMember
		  FROM MEMBER
		 WHERE MEM_ID = #{mem_id}
	</select>
	
	<!-- 	아 이 디 : getMemTelCnt
	  		반 환 값 : int
	  		매개변수 : String(mem_Tel)
	  		설    명 : 사용자 전화번호 중복 조회 (해당 아이디가 있는지 조회 개수반환) 
	  		작 성 자 : 조종원
	  		일    시 : 2018-09-10     
	 -->
	<select id="getMemTelCnt" parameterType="string" resultType="int">
		SELECT COUNT(*)getListProdMember
		  FROM MEMBER
		 WHERE MEM_TEL = #{mem_Tel}
	</select>
	

	<!-- 	아 이 디 : setInsertSignUpUser
	  		설    명 : 사용자정보 등록 (회원가입시 입력한 사용자정보 등록) 
	  		매개변수 : memberVo
	  		반 환 값 : 없음
	  		작 성 자 : 공은별
	  		일    시 : 2018-09-05     
	 -->
	<insert id="setInsertSignUpUser" parameterType="memberVo">
		INSERT INTO MEMBER
		(
			  MEM_ID
			, MEM_PW
			, MEM_KIND
			, MEM_NAME
			, MEM_TEL
			, MEM_BIRTH
			, MEM_GEN
			, MEM_ZIP
			, MEM_ADD
			, MEM_ADDR
			, MEM_CVS_NAME
			, MEM_CVS_TEL
			, MEM_INTRO
			, MEM_X
			, MEM_Y
			, MEM_POINT
		)
		VALUES (
		      #{mem_id, jdbcType=VARCHAR}			--<!--//  일반:이메일, 점주:사업자번호, 관리자:일괄부여  -->
            , CRYPTPACK.ENCRYPT(#{mem_pw, jdbcType=VARCHAR}, #{mem_birth, jdbcType=VARCHAR}) --<!--// 비밀번호  -->
			, #{mem_kind, jdbcType=VARCHAR}			--<!--// 관리자 : 00, 점주 : 01, 일반 : 02  -->
			, #{mem_name, jdbcType=VARCHAR}			--<!--// 일반:일반회원 점주:점주이름  -->
			, #{mem_tel, jdbcType=VARCHAR}			--<!--// 연락처  -->
			, #{mem_birth, jdbcType=VARCHAR}		--<!--// 생년월일  -->
			, #{mem_gen, jdbcType=CHAR}				--<!--// 성별  -->
			, #{mem_zip, jdbcType=NUMERIC}			--<!--// 일반: 개인집주소, 점주:편의점주소  -->
			, #{mem_add, jdbcType=VARCHAR}			--<!--// 일반: 개인집주소, 점주:편의점주소  -->
			, #{mem_addr, jdbcType=VARCHAR}			--<!--// 일반: 개인집주소, 점주:편의점주소  -->
			, #{mem_cvs_name, jdbcType=VARCHAR}		--<!--// 편의점명  -->
			, #{mem_cvs_tel, jdbcType=VARCHAR}		--<!--// 편의점연락처  -->
			, #{mem_intro, jdbcType=VARCHAR}		--<!--// 소개  -->
			, #{mem_x, jdbcType=NUMERIC, javaType=String}			--<!--// 좌표_x  -->
			, #{mem_y, jdbcType=NUMERIC, javaType=String}			--<!--// 좌표_y  -->
			, #{mem_point,jdbcType=NUMERIC}         --<!--// 포인트 -->
		)
	</insert>
	

	<!-- 	아 이 디 : setUpdateMember
			설    명 : 사용자 정보 수정
	  		매개변수 : memberVo
	  		반 환 값 : 없음
	  		작 성 자 : 공은별
	  		일    시 : 2018-09-13     
	 -->
	<update id="setUpdateMember" parameterType="memberVo">
		UPDATE MEMBER
		   SET 
--<!-- 		   MEM_PW = CRYPTPACK.ENCRYPT(#{mem_pw, jdbcType=VARCHAR}, #{mem_id, jdbcType=VARCHAR}) 암호화  키 변경됨--> 
		   	   MEM_PW = CRYPTPACK.ENCRYPT(#{mem_pw, jdbcType=VARCHAR}, (SELECT  MEM_BIRTH FROM MEMBER WHERE MEM_ID = #{mem_id}))
			 , MEM_TEL = #{mem_tel, jdbcType=VARCHAR}
			 , MEM_ZIP = #{mem_zip, jdbcType=NUMERIC}
			 , MEM_ADD = #{mem_add, jdbcType=VARCHAR}
			 , MEM_ADDR = #{mem_addr, jdbcType=VARCHAR}
			 , MEM_X = #{mem_x, jdbcType=NUMERIC, javaType=String}
			 , MEM_Y = #{mem_y, jdbcType=NUMERIC, javaType=String}
			 , MEM_KIND = #{mem_kind, jdbcType=VARCHAR}
			 , MEM_INTRO = #{mem_intro, jdbcType=VARCHAR}
		 WHERE MEM_ID = #{mem_id}
	</update>
	
	
	
	<!-- 	아 이 디 : setUpdateMemberPw
	  		설    명 : 사용자 비밀번호 수정 (비밀번호 찾기 후 새비밀번호로 변경) 
	  		매개변수 : memberVo
	  		반 환 값 : 없음
	  		작 성 자 : 공은별
	  		일    시 : 2018-09-05     
	 -->
	<update id="setUpdateMemberPw" parameterType="memberVo">
		UPDATE MEMBER
--<!-- 	   SET MEM_PW = CRYPTPACK.ENCRYPT(#{mem_pw, jdbcType=VARCHAR}, #{mem_id, jdbcType=VARCHAR}) 암호화  키 변경됨 -->
		   SET MEM_PW = CRYPTPACK.ENCRYPT(#{mem_pw, jdbcType=VARCHAR}, (SELECT  MEM_BIRTH FROM MEMBER WHERE MEM_ID = #{mem_id}))
		 WHERE MEM_ID = #{mem_id}
		   <!-- AND MEM_PW = #{old_mem_pw} -->
	</update>
	
	
	<!-- 	아 이 디 : getMember
	  		설    명 : 한 사용자 정보 조회
	  		매개변수 : String(mem_id)
	  		반 환 값 : memberVo
	  		작 성 자 : 공은별
	  		일    시 : 2018-09-05     
	 -->
	<select id="getMember" resultType="memberVo" parameterType="String">
		SELECT CRYPTPACK.DECRYPT(mem_pw, mem_birth) as mem_pw 
			 , MEM_ID
			 , MEM_KIND
			 , MEM_NAME
			 , MEM_TEL
			 , MEM_BIRTH
			 , MEM_GEN
			 , MEM_ZIP
			 , MEM_ADD
			 , MEM_ADDR
			 , MEM_CVS_NAME
			 , MEM_CVS_TEL
			 , MEM_INTRO
			 , MEM_X
			 , MEM_Y
			 , MEM_POINT
			 , (SELECT FILE_PATH || '/' || FILE_UPNAME FROM FILEDATA WHERE MEM_ID = #{mem_id} AND ROWNUM = 1) as pic_name
		  FROM MEMBER
		  WHERE MEM_ID = #{mem_id}
	</select>



	<!-- 	아 이 디 : getSearchMemberId
	  		설    명 : 사용자ID찾기
	  		매개변수 : memberVo
	  		반 환 값 : memberVo
	  		작 성 자 : 공은별
	  		일    시 : 2018-09-08   
	 -->
	<select id="getSearchMemberId" resultType="memberVo" parameterType="memberVo">
		SELECT MEM_ID
			 , MEM_KIND
			 , MEM_NAME
			 , MEM_TEL
		  FROM MEMBER
		  WHERE 1=1
		  <if test="mem_id != null and mem_id != ''">
		    AND MEM_ID = #{mem_id}
		  </if>
		  <if test="mem_name != null and mem_name != ''">
		    AND MEM_NAME = #{mem_name}
		  </if>
		  <if test="mem_tel != null and mem_tel != ''">
		    AND MEM_TEL = #{mem_tel}
		  </if>
	</select>	
	

	<!-- 	아 이 디 : getMemberPageList
	  		설    명 :  페이징 조회
	  		매개변수 : map (mem_kind , mem_name / page , pageSize)
	  		반 환 값 : memberVo
	  		작 성 자 : 공은별
	  		일    시 : 2018-09-05     
	 -->
	<select id="getMemberPageList" parameterType="memberVo" resultType="memberVo">  	
		SELECT *
		FROM (SELECT a.*, ROWNUM rn
			  FROM
				  (SELECT COUNT(*) OVER() AS tot_cnt
				  		, MEM_ID
						, CRYPTPACK.DECRYPT(mem_pw, mem_birth) as mem_pw
						, MEM_KIND
						, MEM_NAME
						, MEM_TEL
						, MEM_BIRTH
						, MEM_GEN
						, MEM_ZIP
						, MEM_ADD
						, MEM_ADDR
						, MEM_CVS_NAME
						, MEM_CVS_TEL
						, MEM_INTRO
						, MEM_X
						, MEM_Y
						, MEM_POINT
					 FROM MEMBER
				    WHERE 1=1
				    <if test="mem_kind != null and mem_kind != ''">
					    <choose>
					    	<when test="mem_kind.equals('01'.toString())">
					    		AND MEM_KIND in ('01', '04')
					    	</when>
					    	<otherwise>
						    	AND MEM_KIND = #{mem_kind, jdbcType=VARCHAR}
					    	</otherwise>
					    </choose>
					</if>
					<if test="mem_name != null and mem_name != ''">
						AND MEM_NAME = #{mem_name, jdbcType=VARCHAR}
					</if>
				   -- <!-- ORDER BY MEM_NAME  -->
				   )
			  a )
--<!--  		WHERE rn BETWEEN (#{page, jdbcType=INTEGER}-1)*#{pageSize, jdbcType=INTEGER}+1 AND #{page, jdbcType=INTEGER}*#{pageSize, jdbcType=INTEGER}  -->
	</select>
	

	<!-- 	아 이 디 : getMemberListTotalCnt 
	  		설    명 : 사용자 목록 총 건수   
	  		매개변수 : 
	  		반 환 값 : int
	  		작 성 자 : 공은별
	  		일    시 : 2018-09-05     
	 -->
<!--   	<select id="getMemberListTotalCnt" resultType="int" parameterType="map"> -->
<!-- 		SELECT count(*) AS tot_cnt -->
<!-- 		  FROM MEMBER -->
<!-- 		 WHERE 1=1 -->
<!-- 		 <if test="mem_kind != null and mem_kind != ''"> -->
<!-- 		   AND MEM_KIND = #{mem_kind} -->
<!-- 		 </if> -->
<!-- 		 <if test="mem_name != null and mem_name != ''"> -->
<!-- 		   AND MEM_NAME = #{mem_name} -->
<!-- 		 </if> -->
<!--   	</select> -->


	<!-- 
  		아 이 디 : deleteCvsMember
  		설    명 : 회원(편의점)삭제
  		반 환 값 : memberVo
  		매개변수 : String
  		작 성 자 : 공은별
  		일    시 : 2018-09-27
  	 -->
  	<delete id="deleteCvsMember" parameterType="memberVo">
  		DELETE FROM MEMBER
  		WHERE MEM_ID = #{mem_id}
  	</delete>
  	
  	
  	<!-- 
  		아 이 디 : UpdateCvsMember
  		설    명 : 편의점삭제시 해당편의점 사용안함 04로 업데이트 처리
  		반 환 값 : 
  		매개변수 : memberVo
  		작 성 자 : 공은별
  		일    시 : 2018-09-27
  	 -->
  	<update id="UpdateCvsMember" parameterType="memberVo">
		UPDATE MEMBER
		   SET 
			  MEM_KIND = #{mem_kind, jdbcType=VARCHAR}
		 WHERE MEM_ID = #{mem_id}
	</update>
  	
  	
  	
  	
  	
  	<!-- 편의점 이름을 앞뒤로 포함한 검색  -->
  	<select id="searchCvsName" parameterType="String" resultType="memberVo">
  		SELECT * FROM MEMBER WHERE MEM_CVS_NAME LIKE '%'||#{mem_cvs_name}||'%'
  	</select>
  	
  	<!-- 편의점 이름 검색했을때 그 이름을 포함한 편의점들의 목록을 10개로 묶음 -->
  	<select id="getCvsPageList" parameterType="Map" resultType="memberVo">
  		SELECT *
			FROM (SELECT a.*, ROWNUM rn
			  FROM
				  (SELECT MEM_ID
						, MEM_PW
						, MEM_KIND
						, MEM_NAME
						, MEM_TEL
						, MEM_BIRTH
						, MEM_GEN
						, MEM_ZIP
						, MEM_ADD
						, MEM_ADDR
						, MEM_CVS_NAME
						, MEM_CVS_TEL
						, MEM_INTRO
						, TO_CHAR(MEM_X) MEM_X
						, TO_CHAR(MEM_Y) MEM_Y
					 FROM MEMBER
				    WHERE 1=1
				    	AND MEM_KIND = '01'
				    	AND MEM_CVS_NAME like '%${mem_cvs_name}%'
				    ORDER BY MEM_CVS_NAME 
				   )
			  a )
		WHERE rn BETWEEN (#{page}-1)*#{pageSize}+1 AND #{page}*#{pageSize}
  	</select>
  	
  	
  	<!-- 검색한 편의점의 목록 전체 건수 -->
  	<select id="getTotCvsCnt" parameterType="String" resultType="int">
    	SELECT count(*) FROM member WHERE MEM_CVS_NAME like '%'||#{mem_cvs_name}||'%'
  	</select>
  	
  	
  	
  	<!-- 
  		아 이 디 : getListProdMember
  		반 환 값 : cvsSearchVo
  		매개변수 : String
  		설    명 : 제품코드를 받아서 해당 제품의 수량이 존재하는 편의점정보를 반환한다.
  		작 성 자 : 조종원
  		일    시 : 2018-09-05
  	
  	 -->
  	<select id="getListProdMember" parameterType="String" resultType="cvsSearchVo">
		
		SELECT  M.MEM_ID           -- 사업자번호
		       ,M.MEM_NAME         -- 업주명
		       ,M.MEM_TEL          -- 업주전화번호
		       ,M.MEM_BIRTH        -- 업주 생년월일
		       ,M.MEM_GEN          -- 업주 성별
		       ,M.MEM_ZIP          -- 매장 우편번호
		       ,M.MEM_ADD          -- 매장 구주소 
		       ,M.MEM_ADDR         -- 매장 신주소
		       ,M.MEM_CVS_NAME     -- 매장명
		       ,M.MEM_CVS_TEL      -- 매장번호
		       ,M.MEM_INTRO        -- 매장소개
		       ,M.MEM_X            -- 매장X좌표
		       ,M.MEM_Y            -- 매장Y좌표
		       ,SL.BCD_ID     -- 재고리스트코드
		       ,SL.STCKLIST_AMOUNT -- 수량
		       ,SL.STCK_DATE       -- 날짜
		       ,SL.STCKLIST_INFO   -- 비고
		       ,F.FILE_UPNAME  -- 파일업로드명
		       ,F.FILE_PATH    -- 파일경로
		        
		FROM MEMBER M           -- 회원테이블
		JOIN STOCK  S           -- 재고테이블
		ON M.MEM_ID = S.MEM_ID
		JOIN STOCK_LIST  SL     -- 재고리스트테이블
		ON S.STOCK_ID = SL.STOCK_ID
		JOIN FILEdATA F         -- 자료테이블
		ON M.MEM_ID = F.MEM_ID
		WHERE 1=1
		  AND TO_CHAR(SL.STCK_DATE ,'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD') -- 현재날짜
		  AND SL.STCKLIST_KIND = '888' -- 재고
		  AND SL.STCKLIST_AMOUNT > 0   -- 재고1이상
		  AND M.MEM_KIND = '01'        -- 편의점
		  AND SL.PROD_ID   = #{prod_id}        -- 제품코드
  	</select>
  	
  	<select id="getCvs" parameterType="String" resultType="memberVo">
  		select * from member where mem_id = #{mem_id}
  	</select>
  	
  	<select id="updateCvsInfo" parameterType="memberVo">
  		UPDATE MEMBER
		   SET 
		   	   MEM_NAME=#{mem_name, jdbcType=VARCHAR}
		   	 , MEM_PW = CRYPTPACK.ENCRYPT(#{mem_pw, jdbcType=VARCHAR}, (SELECT  MEM_BIRTH FROM MEMBER WHERE MEM_ID = #{mem_id}))
			 , MEM_TEL = #{mem_tel, jdbcType=VARCHAR}
			 , MEM_ZIP = #{mem_zip, jdbcType=NUMERIC}
			 , MEM_ADD = #{mem_add, jdbcType=VARCHAR}
			 , MEM_ADDR = #{mem_addr, jdbcType=VARCHAR}
			 , MEM_X = #{mem_x, jdbcType=NUMERIC, javaType=String}
			 , MEM_Y = #{mem_y, jdbcType=NUMERIC, javaType=String}
			 , MEM_KIND = #{mem_kind, jdbcType=VARCHAR}
			 , MEM_CVS_NAME =#{mem_cvs_name, jdbcType=VARCHAR}
			 , MEM_CVS_TEL = #{mem_cvs_tel, jdbcType=VARCHAR}
		 WHERE MEM_ID = #{mem_id}
  	</select>
  	
  	<!-- 리뷰 작성 후 포인트 획득 -->
  	<update id="pointPlus" parameterType="memberVo">
		UPDATE MEMBER SET mem_point = mem_point + #{mem_point, jdbcType=NUMERIC} WHERE mem_id = #{mem_id}
  	</update>
</mapper>